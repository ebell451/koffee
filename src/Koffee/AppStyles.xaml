<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <Color x:Key="Background">#150e0a</Color>
  <Color x:Key="Text">#b39d86</Color>
  <Color x:Key="Border">#965725</Color>
  <Color x:Key="ActiveBorder">#e1deda</Color>
  <Color x:Key="Control">#532a0e</Color>
  <Color x:Key="AlternatingRow">#20150f</Color>
  <Color x:Key="Highlight">#965725</Color>
  <Color x:Key="Highlight2">#532a0e</Color>
  <Color x:Key="HighlightText">#e1deda</Color>
  <Color x:Key="Error">#f33</Color>

  <SolidColorBrush x:Key="BackgroundBrush" Color="{DynamicResource Background}"/>
  <SolidColorBrush x:Key="TextBrush" Color="{DynamicResource Text}"/>
  <SolidColorBrush x:Key="BorderBrush" Color="{DynamicResource Border}"/>
  <SolidColorBrush x:Key="ActiveBorderBrush" Color="{DynamicResource ActiveBorder}"/>
  <SolidColorBrush x:Key="ControlBrush" Color="{DynamicResource Control}"/>
  <SolidColorBrush x:Key="AlternatingRowBrush" Color="{DynamicResource AlternatingRow}"/>
  <LinearGradientBrush x:Key="HighlightBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="{DynamicResource Highlight}" Offset="0"/>
    <GradientStop Color="{DynamicResource Highlight2}" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="PopupBrush" Color="{DynamicResource Control}"/>
  <SolidColorBrush x:Key="PopupTextBrush" Color="{DynamicResource Text}"/>
  <LinearGradientBrush x:Key="PanelBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="{DynamicResource Highlight}" Offset="0"/>
    <GradientStop Color="{DynamicResource Highlight2}" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="PanelTextBrush" Color="{DynamicResource HighlightText}"/>
  <SolidColorBrush x:Key="ErrorBrush" Color="{DynamicResource Error}"/>

  <SolidColorBrush x:Key="{x:Static SystemColors.WindowBrushKey}" Color="{DynamicResource Background}"/>
  <SolidColorBrush x:Key="{x:Static SystemColors.WindowTextBrushKey}" Color="{DynamicResource Text}"/>
  <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="{DynamicResource Text}"/>
  <LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                        StartPoint="0,0" EndPoint="0,1"
                        GradientStops="{Binding GradientStops, Source={StaticResource HighlightBrush}}"/>
  <LinearGradientBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                        StartPoint="0,0" EndPoint="0,1" Opacity="0.5"
                        GradientStops="{Binding GradientStops, Source={StaticResource HighlightBrush}}"/>
  <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{DynamicResource Text}"/>

  <Style TargetType="Window">
    <Setter Property="Background" Value="{DynamicResource Background}"/>
    <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
  </Style>
  <Style TargetType="Border">
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
  </Style>
  <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="TextBoxBorder" Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                          HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="TextBoxBorder" Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="TextBoxBorder" Property="BorderBrush" Value="{DynamicResource ActiveBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
              <Setter TargetName="TextBoxBorder" Property="BorderBrush" Value="{DynamicResource ActiveBorderBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource ControlBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBorder" Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="ButtonBorder" Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource ActiveBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
              <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource ActiveBorderBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="CheckBox">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <BulletDecorator>
            <BulletDecorator.Bullet>
              <Border x:Name="Border" Width="15" Height="15" BorderThickness="1" SnapsToDevicePixels="true"
                      BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource ControlBrush}">
                <Grid>
                  <Path x:Name="CheckMark" Visibility="Collapsed" Width="11" Height="11" StrokeThickness="2"
                        SnapsToDevicePixels="true" Data="M 0,7 L 4,10 L 10,1">
                    <Path.Stroke>
                      <SolidColorBrush Color="{DynamicResource Text}"/>
                    </Path.Stroke>
                  </Path>
                </Grid>
              </Border>
            </BulletDecorator.Bullet>
            <ContentPresenter Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"/>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ActiveBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ActiveBorderBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
    <Setter Property="SnapsToDevicePixels" Value="true"/>
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
              <Grid Width="15" Height="15">
                <Ellipse x:Name="Border" Fill="{DynamicResource ControlBrush}"
                         StrokeThickness="1" Stroke="{DynamicResource BorderBrush}"/>
                <Ellipse x:Name="CheckMark" Margin="4" Visibility="Collapsed" Fill="{DynamicResource TextBrush}"/>
              </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"
                              RecognizesAccessKey="True"/>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ActiveBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ActiveBorderBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="ListBox">
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
  </Style>
  <Style TargetType="DataGrid">
    <Setter Property="Background" Value="#00000000"/>
    <Setter Property="RowBackground" Value="#00000000"/>
    <Setter Property="AlternatingRowBackground" Value="{DynamicResource AlternatingRowBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
  </Style>

  <!-- Override DataGridColumnHeader to restore sort arrows and column grips when using custom colors -->
  <Style TargetType="{x:Type DataGridColumnHeader}">
    <Setter Property="Background" Value="{DynamicResource ControlBrush}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
          <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0,0,1,1" Grid.ColumnSpan="2"/>
            <ContentPresenter Margin="6,3,6,3" VerticalAlignment="Center" Grid.Column="0"/>
            <Path x:Name="SortArrow" Fill="{TemplateBinding Foreground}" Visibility="Collapsed"
                  VerticalAlignment="Center" Stretch="Fill" Width="8" Height="6" Margin="0,0,8,0"
                  RenderTransformOrigin="0.5,0.4" Data="M0,0 L1,0 0.5,1 z" Grid.Column="1"/>
            <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Cursor="SizeWE"
                   Grid.Column="1" >
              <Thumb.Style>
                <Style TargetType="{x:Type Thumb}">
                  <Setter Property="Width" Value="2"/>
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border Background="Transparent"/>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </Thumb.Style>
            </Thumb>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="SortDirection" Value="Ascending">
              <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
              <Setter TargetName="SortArrow" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="180"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="SortDirection" Value="Descending">
              <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle StrokeThickness="1" Stroke="Red" StrokeDashArray="1 2" SnapsToDevicePixels="true"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="ValidationTemplate">
    <Grid>
      <Grid HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,5,0"
            Opacity="0.7" ToolTip="{Binding Path=/ErrorContent}">
        <Ellipse Width="16" Height="16" Fill="{DynamicResource ErrorBrush}"/>
        <TextBlock Foreground="White" FontWeight="Bold" FontSize="10" TextAlignment="Center"
                   HorizontalAlignment="Center" VerticalAlignment="Center">X</TextBlock>
      </Grid>
      <AdornedElementPlaceholder/>
    </Grid>
  </ControlTemplate>

  <!-- Scrollbars -->
  <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border CornerRadius="4" Background="{TemplateBinding Background}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
    <Track Name="PART_Track" IsDirectionReversed="true">
      <Track.Thumb>
        <Thumb Style="{StaticResource ScrollBarThumb}" Background="{StaticResource ControlBrush}"/>
      </Track.Thumb>
    </Track>
  </ControlTemplate>
  <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
    <Track Name="PART_Track">
      <Track.Thumb>
        <Thumb Style="{StaticResource ScrollBarThumb}" Background="{StaticResource ControlBrush}"/>
      </Track.Thumb>
    </Track>
  </ControlTemplate>
  <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}"/>
      </Trigger>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="8"/>
        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type ScrollViewer}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <ScrollContentPresenter Grid.Column="1"/>
            <ScrollBar Name="PART_VerticalScrollBar" Value="{TemplateBinding VerticalOffset}"
                       Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}"
                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
            <ScrollBar Name="PART_HorizontalScrollBar" Value="{TemplateBinding HorizontalOffset}"
                       Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}"
                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                       Orientation="Horizontal" Grid.Row="1" Grid.Column="1"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Override the ListBoxItem template for Windows 10 to match the Windows 7 template that uses SystemColors instead
       of hard-coded colors. -->
  <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                  Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="Background" TargetName="Bd"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
              <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="true"/>
                <Condition Property="Selector.IsSelectionActive" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="Bd"
                      Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
              <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>